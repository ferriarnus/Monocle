plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.14'
}

configurations {
    builtModJar {
        canBeConsumed = true
        canBeResolved = false
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "TauMC"
        url = "https://maven.taumc.org/releases"
    }
    maven { url = "https://maven.blamejared.com" }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    repositories {
        maven { url 'https://modmaven.dev/' }
    }
    maven {
        url "https://cursemaven.com"
    }
    maven { url 'https://maven.rover656.dev/releases' }
}

base {
    archivesName = mod_id + "-mod-file"
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets {
    main {
        resources {
            // Include resources generated by data generators.
            srcDir 'src/generated/resources'
        }
    }
    upstreamTransformer {
        java {
            compileClasspath += main.compileClasspath
            compileClasspath += main.output
        }
    }
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    compileOnly "maven.modrinth:iris:${iris_modrinth_version}"

    // Must be placed in libs/ folder, and be manually edited to remove the embeddium breaks clause
    if(file("libs/iris-neoforge-${iris_version}.jar").exists()) {
        runtimeOnly "iris:iris-neoforge:${iris_version}"
    } else {
        print "Iris jar not found in libs. Iris will not be available in dev runs."
    }

    implementation("org.embeddedt:embeddium-1.21:${embeddium_version}")

    compileOnly("mekanism:Mekanism:1.21.1-10.7.0.55")
    runtimeOnly("mekanism:Mekanism:1.21.1-10.7.0.55")

    runtimeOnly("curse.maven:xycraft-653786:5601037")
    runtimeOnly("curse.maven:xycraft-machines-653791:5601045")
    runtimeOnly("curse.maven:xycraft-world-653789:5601038")

    compileOnly("curse.maven:just-dire-things-1002348:5894465")
    runtimeOnly("curse.maven:just-dire-things-1002348:5894465")

    runtimeOnly("curse.maven:the-bumblezone-forge-362479:5895588")

    compileOnly("curse.maven:the-twilight-forest-227639:5759335")
    runtimeOnly("curse.maven:the-twilight-forest-227639:5759335")

    compileOnly("curse.maven:framedblocks-441647:5863919")
    runtimeOnly("curse.maven:framedblocks-441647:5863919")

    runtimeOnly("curse.maven:immersive-engineering-231951:5828000")

    runtimeOnly("curse.maven:supplementaries-412082:5902251")
    runtimeOnly("curse.maven:selene-499980:5902944")

    compileOnly("curse.maven:cc-tweaked-282001:5714512")
    runtimeOnly("curse.maven:cc-tweaked-282001:5714512")

    runtimeOnly("curse.maven:ars-nouveau-401955:5955247")
    runtimeOnly("curse.maven:curios-continuation-1037991:5888964")
    runtimeOnly("curse.maven:geckolib-388172:5874016")

    runtimeOnly("curse.maven:forbidden-arcanus-309858:5966516")
    runtimeOnly("curse.maven:valhelsia-core-416935:5847440")

    runtimeOnly("curse.maven:enchanted-witchcraft-560363:5921287")
    runtimeOnly("curse.maven:stateobserver-701213:5888686")
    runtimeOnly("curse.maven:smartbrainlib-661293:5723837")

    runtimeOnly("curse.maven:creeper-overhaul-561625:5725480")
    runtimeOnly("curse.maven:resourceful-config-714059:5753339")
    runtimeOnly("curse.maven:resourceful-lib-570073:5793500")
    runtimeOnly("curse.maven:geckolib-388172:5874016")

    runtimeOnly("curse.maven:tesseract-379232:5657067")
    runtimeOnly("curse.maven:supermartijn642s-config-lib-438332:5546996")
    runtimeOnly("curse.maven:supermartijn642s-core-lib-454372:5713682")

    runtimeOnly("maven.modrinth:caxton:0.6.0-alpha.5+1.21.1-NEOFORGE")

    runtimeOnly("curse.maven:industrial-foregoing-266515:6030556")
    runtimeOnly("curse.maven:titanium-287342:5897690")

    compileOnly("curse.maven:mekanism-covers-1119874:6020891")
    runtimeOnly("curse.maven:mekanism-covers-1119874:6020891")

    runtimeOnly("curse.maven:modern-industrialization-405388:6026073")
    runtimeOnly("curse.maven:cloth-config-348521:5729127")

    compileOnly("curse.maven:applied-energistics-2-223794:6014429")
    runtimeOnly("curse.maven:applied-energistics-2-223794:6014429")

    compileOnly("com.enderio:enderio-machines:7.1.2-alpha")
    runtimeOnly("curse.maven:ender-io-64578:6050753")

    runtimeOnly("curse.maven:jei-238222:5846880")

    upstreamTransformerImplementation("io.github.douira:glsl-transformer:2.0.1")

    jarJar(implementation("org.taumc:glsl-transformation-lib:0.2.0-20.ge3cb096")) {
        transitive = false
    }
    additionalRuntimeClasspath("org.taumc:glsl-transformation-lib:0.2.0-20.ge3cb096") {
        transitive = false
    }
}

jar {
    manifest {
        attributes["Automatic-Module-Name"] = "monocle_mod"
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version + ".ms",
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            embeddium_version      : embeddium_version,
            iris_version           : iris_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

artifacts {
    builtModJar(tasks.jar.archiveFile) {
        builtBy(jar)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
